---
Checks: "*,
        -abseil-*,
        -altera-*,
        -android-*,
        -fuchsia-*,
        -google-*,
        -llvm*,
        -modernize-use-trailing-return-type,
        -zircon-*,
        -readability-else-after-return,
        -readability-static-accessed-through-instance,
        -readability-avoid-const-params-in-decls,
        -cppcoreguidelines-non-private-member-variables-in-classes,
        -misc-non-private-member-variables-in-classes,
        -cppcoreguidelines-pro-type-union-access,
        -cppcoreguidelines-avoid-magic-numbers,
        -readability-magic-numbers,
        -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
        -misc-use-anonymous-namespace,
        -hicpp-no-array-decay,
        -hicpp-avoid-c-arrays,
        -cppcoreguidelines-pro-type-reinterpret-cast,
        -cppcoreguidelines-avoid-c-arrays,
        -modernize-avoid-c-arrays,
        -cppcoreguidelines-init-variables,
        -cppcoreguidelines-owning-memory,
        -readability-identifier-length,
        -bugprone-easily-swappable-parameters,
"

HeaderFilterRegex: ''
FormatStyle: none
CheckOptions:
  # Classes and Structs
  - { key: readability-identifier-naming.ClassCase, value: CamelCase }
  - { key: readability-identifier-naming.StructCase, value: CamelCase }
  
  # Concepts
  - { key: readability-identifier-naming.ConceptCase, value: CamelCase }
  - { key: readability-identifier-naming.ConceptSuffix, value: Concept }
  
  # Enums
  - { key: readability-identifier-naming.EnumCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumPrefix, value: E }
  
  # Unions
  - { key: readability-identifier-naming.UnionCase, value: CamelCase }
  - { key: readability-identifier-naming.UnionPrefix, value: U }
  
  # Template Parameters
  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase }
  - { key: readability-identifier-naming.TemplateParameterPrefix, value: T }
  
  # Parameters and Variables
  - { key: readability-identifier-naming.ParameterCase, value: camelBack }
  - { key: readability-identifier-naming.LocalVariableCase, value: camelBack }
  - { key: readability-identifier-naming.VariableCase, value: camelBack }
  
  # Global Variables
  - { key: readability-identifier-naming.GlobalVariableCase, value: camelBack }
  - { key: readability-identifier-naming.GlobalVariablePrefix, value: g_ }
  
  # Functions and Methods
  - { key: readability-identifier-naming.FunctionCase, value: camelBack }
  - { key: readability-identifier-naming.MethodCase, value: camelBack }
  
  # Class and Struct Fields
  - { key: readability-identifier-naming.MemberCase, value: camelBack }
  - { key: readability-identifier-naming.MemberPrefix, value: m_ }
  - { key: readability-identifier-naming.PublicMemberCase, value: camelBack }
  - { key: readability-identifier-naming.PublicMemberPrefix, value: '' }
  
  # Union Members
  - { key: readability-identifier-naming.UnionMemberCase, value: camelBack }
  
  # Constants
  - { key: readability-identifier-naming.EnumConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.ConstantCase, value: camelCase }
  - { key: readability-identifier-naming.GlobalConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.StaticConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.ClassConstantCase, value: UPPER_CASE }
  
  # Namespaces
  - { key: readability-identifier-naming.NamespaceCase, value: lower_case }
  
  # Typedefs
  - { key: readability-identifier-naming.TypedefCase, value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasCase, value: CamelCase }
  
  # Macros
  - { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE }
  
  # Properties
  - { key: readability-identifier-naming.GetterMethodCase, value: camelBack }
  - { key: readability-identifier-naming.SetterMethodCase, value: camelBack }
  
  # Events
  - { key: readability-identifier-naming.SuffixedMethodCase, value: CamelCase }
  - { key: readability-identifier-naming.SuffixedMethodSuffix, value: Event }
